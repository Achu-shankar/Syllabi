-- Skills System Redesign Migration
-- This migration creates a new reusable skills architecture with:
-- 1. skills table - reusable skill definitions
-- 2. chatbot_skill_associations - links skills to chatbots
-- 3. embeddings support for semantic search
-- 4. data migration from old chatbot_skills table

-- Enable pgvector extension for embeddings
CREATE EXTENSION IF NOT EXISTS vector;

-- Add tool selection method to chatbots table
ALTER TABLE chatbots ADD COLUMN IF NOT EXISTS tool_selection_method text DEFAULT 'direct' CHECK (tool_selection_method IN ('direct', 'semantic_retrieval'));

-- Create the new skills table (reusable skill definitions)
CREATE TABLE IF NOT EXISTS skills (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE, -- null for built-in skills
    name text NOT NULL, -- unique identifier (e.g., "send_slack_message", "my_product_api")
    display_name text NOT NULL, -- human-readable name
    description text NOT NULL, -- for LLM understanding and search
    category text NOT NULL DEFAULT 'custom', -- grouping (e.g., "slack", "google_drive", "custom")
    type text NOT NULL DEFAULT 'custom' CHECK (type IN ('custom', 'builtin')),
    function_schema jsonb NOT NULL, -- OpenAI function schema format
    configuration jsonb DEFAULT '{}', -- endpoint, headers, auth for custom skills
    embedding vector(1536), -- OpenAI ada-002 embeddings for semantic search
    is_active boolean DEFAULT true,
    execution_count integer DEFAULT 0,
    last_executed_at timestamptz,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Create chatbot_skill_associations table (many-to-many with per-chatbot config)
CREATE TABLE IF NOT EXISTS chatbot_skill_associations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    chatbot_id uuid NOT NULL REFERENCES chatbots(id) ON DELETE CASCADE,
    skill_id uuid NOT NULL REFERENCES skills(id) ON DELETE CASCADE,
    is_active boolean DEFAULT true,
    custom_config jsonb DEFAULT '{}', -- override skill config for this chatbot
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    UNIQUE(chatbot_id, skill_id) -- prevent duplicate associations
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_skills_user_id ON skills(user_id);
CREATE INDEX IF NOT EXISTS idx_skills_category ON skills(category);
CREATE INDEX IF NOT EXISTS idx_skills_type ON skills(type);
CREATE INDEX IF NOT EXISTS idx_skills_name ON skills(name);
CREATE INDEX IF NOT EXISTS idx_skills_embedding ON skills USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

CREATE INDEX IF NOT EXISTS idx_chatbot_skill_associations_chatbot_id ON chatbot_skill_associations(chatbot_id);
CREATE INDEX IF NOT EXISTS idx_chatbot_skill_associations_skill_id ON chatbot_skill_associations(skill_id);
CREATE INDEX IF NOT EXISTS idx_chatbot_skill_associations_active ON chatbot_skill_associations(is_active);

-- Create RLS policies
ALTER TABLE skills ENABLE ROW LEVEL SECURITY;
ALTER TABLE chatbot_skill_associations ENABLE ROW LEVEL SECURITY;

-- Skills policies
CREATE POLICY "Users can view their own skills and built-in skills" ON skills
    FOR SELECT USING (user_id = auth.uid() OR user_id IS NULL);

CREATE POLICY "Users can create their own skills" ON skills
    FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own skills" ON skills
    FOR UPDATE USING (user_id = auth.uid());

CREATE POLICY "Users can delete their own skills" ON skills
    FOR DELETE USING (user_id = auth.uid());

-- Associations policies
CREATE POLICY "Users can view associations for their chatbots" ON chatbot_skill_associations
    FOR SELECT USING (
        chatbot_id IN (
            SELECT id FROM chatbots WHERE user_id = auth.uid()
        )
    );

CREATE POLICY "Users can create associations for their chatbots" ON chatbot_skill_associations
    FOR INSERT WITH CHECK (
        chatbot_id IN (
            SELECT id FROM chatbots WHERE user_id = auth.uid()
        )
    );

CREATE POLICY "Users can update associations for their chatbots" ON chatbot_skill_associations
    FOR UPDATE USING (
        chatbot_id IN (
            SELECT id FROM chatbots WHERE user_id = auth.uid()
        )
    );

CREATE POLICY "Users can delete associations for their chatbots" ON chatbot_skill_associations
    FOR DELETE USING (
        chatbot_id IN (
            SELECT id FROM chatbots WHERE user_id = auth.uid()
        )
    );

-- Function to generate embeddings (placeholder - will be called from app)
CREATE OR REPLACE FUNCTION generate_skill_embedding(skill_text text)
RETURNS vector(1536)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- This is a placeholder function
    -- In practice, embeddings will be generated by the application
    -- using OpenAI's API and then stored
    RETURN NULL;
END;
$$;

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_skills_updated_at BEFORE UPDATE ON skills
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_chatbot_skill_associations_updated_at BEFORE UPDATE ON chatbot_skill_associations
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Data migration from old chatbot_skills table
DO $$
DECLARE
    old_skill RECORD;
    new_skill_id uuid;
    chatbot_owner_id uuid;
BEGIN
    -- Check if old table exists
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'chatbot_skills') THEN
        RAISE NOTICE 'Migrating data from chatbot_skills to new schema...';
        
        -- Migrate each old skill
        FOR old_skill IN 
            SELECT cs.*, c.user_id as owner_id
            FROM chatbot_skills cs
            JOIN chatbots c ON cs.chatbot_id = c.id
        LOOP
            -- Get the chatbot owner
            chatbot_owner_id := old_skill.owner_id;
            
            -- Check if this skill already exists (by name and user)
            SELECT id INTO new_skill_id
            FROM skills 
            WHERE name = old_skill.name 
            AND user_id = chatbot_owner_id;
            
            -- If skill doesn't exist, create it
            IF new_skill_id IS NULL THEN
                INSERT INTO skills (
                    user_id,
                    name,
                    display_name,
                    description,
                    category,
                    type,
                    function_schema,
                    configuration,
                    is_active,
                    execution_count,
                    last_executed_at,
                    created_at,
                    updated_at
                ) VALUES (
                    chatbot_owner_id,
                    old_skill.name,
                    old_skill.display_name,
                    old_skill.description,
                    'custom', -- all old skills are custom
                    'custom',
                    old_skill.function_schema,
                    old_skill.configuration,
                    old_skill.is_active,
                    old_skill.execution_count,
                    old_skill.last_executed_at,
                    old_skill.created_at,
                    old_skill.updated_at
                ) RETURNING id INTO new_skill_id;
                
                RAISE NOTICE 'Created skill: % (ID: %)', old_skill.display_name, new_skill_id;
            END IF;
            
            -- Create association (if it doesn't exist)
            INSERT INTO chatbot_skill_associations (
                chatbot_id,
                skill_id,
                is_active,
                created_at,
                updated_at
            ) VALUES (
                old_skill.chatbot_id,
                new_skill_id,
                old_skill.is_active,
                old_skill.created_at,
                old_skill.updated_at
            ) ON CONFLICT (chatbot_id, skill_id) DO NOTHING;
            
        END LOOP;
        
        RAISE NOTICE 'Data migration completed successfully';
    ELSE
        RAISE NOTICE 'chatbot_skills table not found - skipping migration';
    END IF;
END $$;

-- Grant permissions to authenticated users
GRANT ALL ON skills TO authenticated;
GRANT ALL ON chatbot_skill_associations TO authenticated;

-- Grant permissions to service role (for backend operations)
GRANT ALL ON skills TO service_role;
GRANT ALL ON chatbot_skill_associations TO service_role;

-- Add helpful comments
COMMENT ON TABLE skills IS 'Reusable skill definitions that can be shared across chatbots';
COMMENT ON TABLE chatbot_skill_associations IS 'Many-to-many relationship between chatbots and skills';
COMMENT ON COLUMN skills.embedding IS 'Vector embedding for semantic search (OpenAI ada-002 format)';
COMMENT ON COLUMN skills.user_id IS 'Owner of custom skills; NULL for built-in skills';
COMMENT ON COLUMN chatbot_skill_associations.custom_config IS 'Per-chatbot overrides for skill configuration'; 